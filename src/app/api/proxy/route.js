import { NextResponse } from 'next/server';
import { writeFile, mkdir } from 'fs/promises';
import { join } from 'path';

function getExtension(filename) {
  const lastDot = filename.lastIndexOf('.');
  return lastDot !== -1 ? filename.substring(lastDot) : '';
}

// Generic handler for POST, PUT, DELETE requests
async function proxyRequest(request) {
  try {
    const url = new URL(request.url);
    const endpoint = url.searchParams.get('endpoint');
    if (!endpoint) {
      return NextResponse.json({ error: 'Endpoint parameter is required' }, { status: 400 });
    }

    const apiUrl = `https://laravel.kasyifana.my.id/api/${endpoint}`;
    const contentType = request.headers.get('content-type') || '';
    const authHeader = request.headers.get('authorization');

    const headers = {
      'Accept': 'application/json',
    };
    if (authHeader) {
      headers['Authorization'] = authHeader;
    }

    let body;
    let response;

    // Handle JSON data for PUT/POST updates
    if (contentType.includes('application/json')) {
      const jsonBody = await request.json();
      body = JSON.stringify(jsonBody);
      headers['Content-Type'] = 'application/json';

      response = await fetch(apiUrl, {
        method: request.method,
        headers,
        body,
      });

    // Handle FormData for file uploads (primarily for new reports)
    } else if (contentType.includes('multipart/form-data')) {
      const formData = await request.formData();
      let fileName = null;
      let fileBuffer = null;

      // The token might be in the form data for legacy form submissions
      if (formData.has('auth_token')) {
        if (!headers['Authorization']) {
            headers['Authorization'] = `Bearer ${formData.get('auth_token')}`;
        }
        formData.delete('auth_token');
      }

      if (formData.has('lampiran')) {
        const file = formData.get('lampiran');
        if (file instanceof File) {
          // FIX: Use the filename generated by the client-side.
          // DO NOT generate a new timestamp here.
          const fileName = file.name;
          
          const fileBuffer = Buffer.from(await file.arrayBuffer());

          const uploadDir = join(process.cwd(), 'public', 'uploads');
          await mkdir(uploadDir, { recursive: true });
          const filePath = join(uploadDir, fileName);
          await writeFile(filePath, fileBuffer);

          // The original formData is forwarded to the backend.
          // It already contains the file with the correct name, so no modification is needed.
        }
      }
      
      // Don't set Content-Type for FormData, fetch will do it automatically with the correct boundary
      response = await fetch(apiUrl, {
        method: 'POST', // FormData is almost always POST
        headers,
        body: formData,
      });

    } else {
        return NextResponse.json({ error: 'Unsupported Content-Type' }, { status: 415 });
    }

    const responseData = await response.json();
    if (!response.ok) {
        return NextResponse.json(responseData, { status: response.status });
    }

    return NextResponse.json(responseData);

  } catch (error) {
    console.error('[PROXY_ERROR]', error);
    return NextResponse.json(
      { error: error.message || 'Failed to process request' },
      { status: 500 }
    );
  }
}

export { proxyRequest as POST, proxyRequest as PUT, proxyRequest as DELETE };

export async function GET(request) {
  try {
    // Get authorization from request headers
    const authHeader = request.headers.get('authorization');
    
    
    // Get the URL from the request to determine which endpoint to call
    const url = new URL(request.url);
    const endpoint = url.searchParams.get('endpoint') || 'profile';
    
    // Default to profile endpoint
    let apiUrl = 'https://laravel.kasyifana.my.id/api/profile';
    
    // Allow different endpoints based on the endpoint parameter
    if (endpoint === 'user') {
      apiUrl = 'https://laravel.kasyifana.my.id/api/user';
      
    } else if (endpoint.startsWith('laporan')) {
      // Handle laporan endpoints
      const parts = endpoint.split('/');
      
      if (parts.length === 1) {
        // GET /api/laporan - Get all reports
        apiUrl = 'https://laravel.kasyifana.my.id/api/laporan';
        
      } else if (parts[1] === 'status' && parts.length > 2) {
        // GET /api/laporan/status/{status} - Get reports by status
        const status = parts[2];
        apiUrl = `https://laravel.kasyifana.my.id/api/laporan/status/${status}`;
        
      } else {
        // GET /api/laporan/{id} - Get a specific report
        const reportId = parts[1];
        apiUrl = `https://laravel.kasyifana.my.id/api/laporan/${reportId}`;
        
      }
    }
    
    // Set up headers
    const headers = {
      'Accept': 'application/json',
    };
    
    // Add authorization if available
    if (authHeader) {
      headers['Authorization'] = authHeader;
      
      // Log token details for debugging (safely)
      const token = authHeader.split(' ')[1];
      if (token) {
        
        // Check various token formats
        const isJwtFormat = /^[A-Za-z0-9-_=]+\.[A-Za-z0-9-_=]+\.?[A-Za-z0-9-_.+/=]*$/.test(token);
        
        
        // Check if it might be a Laravel Sanctum token (generally longer, no dots)
        const isSanctumFormat = token.length > 30 && !token.includes('.');
        
        
        // Try alternative header format if needed (some Laravel apps expect different formats)
        if (!isJwtFormat && !isSanctumFormat) {
          
          headers['Authorization'] = `Bearer ${token}`;  // Default (already set)
          
          // Some systems need just the token without Bearer
          headers['X-Auth-Token'] = token;
        }
      }
    }
    
    
    // Forward the request to the Laravel API
    const response = await fetch(apiUrl, {
      method: 'GET',
      headers: headers,
    });
    
    // Handle error responses
    if (!response.ok) {
      console.error(`API Error: ${response.status} ${response.statusText}`);
      
      // Try to get detailed error information
      let errorDetails = '';
      try {
        const errorText = await response.text();
        console.error('Error response content:', errorText);
        
        try {
          // Try parsing as JSON
          const errorJson = JSON.parse(errorText);
          errorDetails = errorJson.message || errorJson.error || JSON.stringify(errorJson);
        } catch {
          // Not JSON, use text
          errorDetails = errorText.substring(0, 100) + (errorText.length > 100 ? '...' : '');
        }
      } catch (e) {
        console.error('Could not read error response:', e);
      }
      
      return NextResponse.json(
        { 
          error: response.statusText,
          details: errorDetails,
          status: response.status
        },
        { status: response.status }
      );
    }
    
    // Return the successful response
    const data = await response.json();
    
    return NextResponse.json(data);
  } catch (error) {
    console.error('Proxy error:', error);
    return NextResponse.json(
      { error: error.message || 'Failed to process request' },
      { status: 500 }
    );
  }
}
